// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/api.dart';
import 'api/game.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 147252734;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_troj',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<Cell> crateApiGameCellSwitchFn({required Cell that});

  bool crateApiApiCheckIfFull({required GameTurn gameTurn});

  Player? crateApiApiCheckWinner({required GameTurn gameTurn});

  Future<bool> crateApiGameGameTurnCheckIfFull({required GameTurn that});

  Future<Player?> crateApiGameGameTurnCheckWinner({required GameTurn that});

  Future<GameTurn> crateApiGameGameTurnNew();

  Future<void> crateApiApiInitApp();

  Cell crateApiApiMakeMove({required Cell cell, required Player turn});

  GameTurn crateApiApiNewGame();

  Cell crateApiApiSwitchFn({required Cell cell});

  Player crateApiApiSwitchTurn({required Player turn});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Cell> crateApiGameCellSwitchFn({required Cell that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_cell(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cell,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGameCellSwitchFnConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGameCellSwitchFnConstMeta =>
      const TaskConstMeta(debugName: "cell_switch_fn", argNames: ["that"]);

  @override
  bool crateApiApiCheckIfFull({required GameTurn gameTurn}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_game_turn(gameTurn, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiCheckIfFullConstMeta,
        argValues: [gameTurn],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiCheckIfFullConstMeta =>
      const TaskConstMeta(debugName: "check_if_full", argNames: ["gameTurn"]);

  @override
  Player? crateApiApiCheckWinner({required GameTurn gameTurn}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_game_turn(gameTurn, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_player,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiCheckWinnerConstMeta,
        argValues: [gameTurn],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiCheckWinnerConstMeta =>
      const TaskConstMeta(debugName: "check_winner", argNames: ["gameTurn"]);

  @override
  Future<bool> crateApiGameGameTurnCheckIfFull({required GameTurn that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_game_turn(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGameGameTurnCheckIfFullConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGameGameTurnCheckIfFullConstMeta =>
      const TaskConstMeta(
        debugName: "game_turn_check_if_full",
        argNames: ["that"],
      );

  @override
  Future<Player?> crateApiGameGameTurnCheckWinner({required GameTurn that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_game_turn(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_player,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGameGameTurnCheckWinnerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGameGameTurnCheckWinnerConstMeta =>
      const TaskConstMeta(
        debugName: "game_turn_check_winner",
        argNames: ["that"],
      );

  @override
  Future<GameTurn> crateApiGameGameTurnNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_game_turn,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGameGameTurnNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGameGameTurnNewConstMeta =>
      const TaskConstMeta(debugName: "game_turn_new", argNames: []);

  @override
  Future<void> crateApiApiInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Cell crateApiApiMakeMove({required Cell cell, required Player turn}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_cell(cell, serializer);
          sse_encode_player(turn, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cell,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiMakeMoveConstMeta,
        argValues: [cell, turn],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiMakeMoveConstMeta =>
      const TaskConstMeta(debugName: "make_move", argNames: ["cell", "turn"]);

  @override
  GameTurn crateApiApiNewGame() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_game_turn,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiNewGameConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiNewGameConstMeta =>
      const TaskConstMeta(debugName: "new_game", argNames: []);

  @override
  Cell crateApiApiSwitchFn({required Cell cell}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_cell(cell, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_cell,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiSwitchFnConstMeta,
        argValues: [cell],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiSwitchFnConstMeta =>
      const TaskConstMeta(debugName: "switch_fn", argNames: ["cell"]);

  @override
  Player crateApiApiSwitchTurn({required Player turn}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_player(turn, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_player,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiApiSwitchTurnConstMeta,
        argValues: [turn],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiApiSwitchTurnConstMeta =>
      const TaskConstMeta(debugName: "switch_turn", argNames: ["turn"]);

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Cell dco_decode_box_autoadd_cell(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_cell(raw);
  }

  @protected
  GameTurn dco_decode_box_autoadd_game_turn(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_game_turn(raw);
  }

  @protected
  Player dco_decode_box_autoadd_player(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_player(raw);
  }

  @protected
  Cell dco_decode_cell(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Cell_Empty();
      case 1:
        return Cell_Filled(dco_decode_player(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  GameTurn dco_decode_game_turn(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GameTurn(
      board: dco_decode_list_list_cell(arr[0]),
      turn: dco_decode_player(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Cell> dco_decode_list_cell(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_cell).toList();
  }

  @protected
  List<List<Cell>> dco_decode_list_list_cell(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_cell).toList();
  }

  @protected
  Player? dco_decode_opt_box_autoadd_player(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_player(raw);
  }

  @protected
  Player dco_decode_player(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Player.values[raw as int];
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Cell sse_decode_box_autoadd_cell(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_cell(deserializer));
  }

  @protected
  GameTurn sse_decode_box_autoadd_game_turn(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_game_turn(deserializer));
  }

  @protected
  Player sse_decode_box_autoadd_player(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_player(deserializer));
  }

  @protected
  Cell sse_decode_cell(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return Cell_Empty();
      case 1:
        var var_field0 = sse_decode_player(deserializer);
        return Cell_Filled(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  GameTurn sse_decode_game_turn(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_board = sse_decode_list_list_cell(deserializer);
    var var_turn = sse_decode_player(deserializer);
    return GameTurn(board: var_board, turn: var_turn);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Cell> sse_decode_list_cell(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Cell>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_cell(deserializer));
    }
    return ans_;
  }

  @protected
  List<List<Cell>> sse_decode_list_list_cell(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <List<Cell>>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_cell(deserializer));
    }
    return ans_;
  }

  @protected
  Player? sse_decode_opt_box_autoadd_player(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_player(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Player sse_decode_player(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Player.values[inner];
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_cell(Cell self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_cell(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_game_turn(
    GameTurn self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_game_turn(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_player(Player self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_player(self, serializer);
  }

  @protected
  void sse_encode_cell(Cell self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Cell_Empty():
        sse_encode_i_32(0, serializer);
      case Cell_Filled(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_player(field0, serializer);
    }
  }

  @protected
  void sse_encode_game_turn(GameTurn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_list_cell(self.board, serializer);
    sse_encode_player(self.turn, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_cell(List<Cell> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_cell(item, serializer);
    }
  }

  @protected
  void sse_encode_list_list_cell(
    List<List<Cell>> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_cell(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_player(
    Player? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_player(self, serializer);
    }
  }

  @protected
  void sse_encode_player(Player self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
